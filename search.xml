<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Javascript的数据类型及检测]]></title>
    <url>%2F2019%2F01%2F16%2FJS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E6%A3%80%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[JavaScript 有几种类型的值？Javascript 有两种数据类型，分别是基本数据类型和引用数据类型。 基本数据类型包括 Undefined、Null、Boolean、Number、String、Symbol (ES6 新增，表示独一无二的值) 引用数据类型统称为 Object 对象，主要包括对象、数组和函数。 基本数据类型1.值是不可变的2.存放在栈区原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。 3.值的比较 == : 只进行值的比较，会进行数据类型的转换。 === : 不仅进行值的比较，还要进行数据类型的比较 引用数据类型1.值是可变的123var a=&#123;age:20&#125;； a.age=21； console.log(a.age)；//21 上面代码说明引用类型可以拥有属性和方法，并且是可以动态改变的。 2.同时保存在栈内存和堆内存引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。 3.比较是引用的比较一个变量给另一个变量赋引用类型的值时，同样也会将存储在变量中的对象的值复制一份放到为新变量分配的空间中 。 12345var a = &#123;age:20&#125;; var b = a; b.age = 21; console.log(a.age == b.age);//true console.log(a.age);//21 变量 a 初始化时，a 指针指向对象{age:20}的地址，a 赋值给 b 后,b 又指向该对象{age:20}的地址，这两个变量指向了同一个对象。因此，改变其中任何一个变量，都会相互影响。 此时，如果取消某一个变量对于原对象的引用，则不会影响到另一个变量。 1234var a=&#123;age:20&#125;;var b=a; a = 1; b // &#123;age:20&#125; 上面代码中，a 和 b 指向同一个对象，然后 a 的值变为 1，这时不会对 b 产生影响，b 还是指向原来的那个对象。 判断数据类型1.typeoftypeof 返回一个表示数据类型的字符串，返回结果包括：number、boolean、string、symbol、object、undefined、function 等 7 种数据类型，但不能判断 null、array（返回的是object） 等 。 null 表示一个值被定义了，定义为“空值” undefined 表示根本不存在定义。 123456typeof Symbol(); // symbol 有效 typeof ''; // string 有效 typeof 1; // number 有效 typeof true; //boolean 有效 typeof undefined; //undefined 有效 typeof new Function(); // function 有效 数组和对象返回的都是 object，这时就需要使用 instanceof 来判断 2.instanceofinstanceof 是用来判断 A 是否为 B 的实例，表达式为：A instanceof B，如果 A 是 B 的实例，则返回 true,否则返回 false。 instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。 1234[] instanceof Array; //true &#123;&#125; instanceof Object;//true new Date() instanceof Date;//true new RegExp() instanceof RegExp//true 注：数据类型大写 关于数组的类型判断，还可以用 ES6 新增Array.isArray() 1Array.isArray([]); // true instanceof 三大弊端 对于基本数据类型来说，字面量方式创建出来的结果和实例方式创建的是有一定的区别的 12console.log(1 instanceof Number)//false console.log(new Number(1) instanceof Number)//true 从严格意义上来讲，只有实例创建出来的结果才是标准的对象数据类型值，也是标准的 Number 类的一个实例；对于字面量方式创建出来的结果是基本的数据类型值，不是严谨的实例。但是由于 JS 的松散特点，导致了可以使用 Number.prototype 上提供的方法。 只要在当前实例的原型链上，我们用其检测出来的结果都是 true。在类的原型继承中，我们最后检测出来的结果未必准确。 123var arr = [1, 2, 3]; console.log(arr instanceof Array) // true console.log(arr instanceof Object); // true 不能检测 null 和 undefined 3.===只能用于判断 null 和 undefined，因为这两种类型的值都是唯一的。 123var a = null;typeof a; // "object" a === null; // true undefined 还可以用 typeof 来判断 4.constructorconstructor 作用和 instanceof 非常相似。但 constructor 检测 Object 与 instanceof 不一样，还可以处理基本数据类型的检测。 12345var aa=[1,2]; console.log(aa.constructor===Array);//true console.log(aa.constructor===RegExp);//false console.log((1).constructor===Number);//true constructor 两大弊端 null 和 undefined 是无效的对象， constructor不存在，这两种类型的数据不能通过constructor来判断。 函数的 constructor 是不稳定的，这个主要体现在把类的原型进行重写，在重写的过程中很有可能出现把之前的 constructor 给覆盖了，这样检测出来的结果就是不准确的 1234function Fn()&#123;&#125;; Fn.prototype = new Array();var f = new Fn;console.log(f.constructor);//Array 5.Object.prototype.toString.call()Object.prototype.toString.call() 最准确最常用的方式。首先获取 Object 原型上的 toString 方法，让方法执行，让 toString 方法中的 this 指向第一个参数的值。 123456789101112Object.prototype.toString.call(''); //[object String]Object.prototype.toString.call(1); //[object Number]Object.prototype.toString.call(true); // [object Boolean]Object.prototype.toString.call(undefined); // [object Undefined]Object.prototype.toString.call(null); // [object Null]Object.prototype.toString.call(new Function()); // [object Function]Object.prototype.toString.call(new Date()); // [object Date]Object.prototype.toString.call([]); // [object Array]Object.prototype.toString.call(new RegExp()); // [object RegExp]Object.prototype.toString.call(new Error()); // [object Error]Object.prototype.toString.call(document); // [object HTMLDocument]Object.prototype.toString.call(window); //[object global] window是全局对象global的引用 补充： 对于 Number、String，Boolean，Array，RegExp、Date、Function 原型上的 toString 方法都是把当前的数据类型转换为字符串的类型（它们的作用仅仅是用来转换为字符串的） Object 上的 toString 并不是用来转换为字符串的。 Object 上的 toString 它的作用是返回当前方法执行的主体（方法中的 this）所属类的详细信息即”[object Object]”，其中第一个 object 代表当前实例是对象数据类型的(这个是固定死的)，第二个 Object 代表的是 this 所属的类是 Object。 总结 typeof instanceof === constructor Null √ Undefined √ √ Boolean √ √ √ String √ √ √ Number √ √ √ Symbol √ √ √ Object √ √ √ Array √ √ Function √ √ √]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[word-快速输入数学公式]]></title>
    <url>%2F2018%2F05%2F04%2Fword-%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[HTTP协议]]></title>
    <url>%2F2018%2F04%2F13%2FHTTP%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[1.简介​ HTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。 ​ HTTP基于TCP/IP通信协议来传递数据。 ​ HTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。 2.特点​ （1）HTTP是无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。 ​ （2）HTTP是媒体独立的：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。 ​ （3）HTTP是无状态：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。 3.通信流程​ 4.消息结构​ HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。 客户端请求消息：请求行、请求头部、空行和请求数据。 123456请求行 GET /hello.txt HTTP/1.1 (说明请求类型:要访问的资源以及所使用的HTTP版本)请求头部 User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3 Host: www.example.com Accept-Language: en, mi空行请求数据 服务端响应消息：状态行、消息报头、空行和响应正文。12345678910111213141516状态行 HTTP/1.1 200 OK 消息报头 Date: Mon, 27 Jul 2009 12:28:53 GMT Server: Apache Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT ETag: &quot;34aa387-d-1568eb00&quot; Accept-Ranges: bytes Content-Length: 51 Vary: Accept-Encoding Content-Type: text/plain空行响应正文 &lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;!--body goes here--&gt; &lt;/body&gt; &lt;/html&gt; 5.请求方法GET 请求指定的页面信息，并返回实体主体。 HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头 POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。 PUT 从客户端向服务器传送的数据取代指定的文档的内容。 DELETE 请求服务器删除指定的页面。 CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。 OPTIONS 允许客户端查看服务器的性能。 TRACE 回显服务器收到的请求，主要用于测试或诊断。 ###6.状态码 HTTP状态码分类 ​ 1** 信息，服务器收到请求，需要请求者继续执行操作 ​ 2** 成功，操作被成功接收并处理 ​ 3** 重定向，需要进一步的操作以完成请求 ​ 4** 客户端错误，请求包含语法错误或无法完成请求 ​ 5** 服务器错误，服务器在处理请求的过程中发生了错 HTTP状态码列表 100 Continue 继续。客户端应继续其请求 101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议 200 OK 请求成功。一般用于GET与POST请求 201 Created 已创建。成功请求并创建了新的资源 202 Accepted 已接受。已经接受请求，但未处理完成 203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本 204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档 205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域 206 Partial Content 部分内容。服务器成功处理了部分GET请求 300 Multiple Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择 301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替 302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI 303 See Other 查看其它地址。与301类似。使用GET和POST请求查看 304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源 305 Use Proxy 使用代理。所请求的资源必须通过代理访问 306 Unused 已经被废弃的HTTP状态码 307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向 400 Bad Request 客户端请求的语法错误，服务器无法理解 401 Unauthorized 请求要求用户的身份认证 402 Payment Required 保留，将来使用 403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求 404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面 405 Method Not Allowed 客户端请求中的方法被禁止 406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求 407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权 408 Request Time-out 服务器等待客户端发送的请求时间过长，超时 409 Conflict 服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突 410 Gone 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置 411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息 412 Precondition Failed 客户端请求信息的先决条件错误 413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息 414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理 415 Unsupported Media Type 服务器无法处理请求附带的媒体格式 416 Requested range not satisfiable 客户端请求的范围无效 417 Expectation Failed 服务器无法满足Expect的请求头信息 500 Internal Server Error 服务器内部错误，无法完成请求 501 Not Implemented 服务器不支持请求的功能，无法完成请求 502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求 503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中 504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求 505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18.4.11前端笔记]]></title>
    <url>%2F2018%2F04%2F11%2F18.4.11%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[link和@import页面中使用CSS的方式主要有3种：行内添加定义style属性值，页面头部内嵌调用和外面链接调用. 其中外面引用有两种：link和@import。方式分别是： link:1&lt;link rel="stylesheet" rev="stylesheet" href="CSS文件" type="text/css" media="all" /&gt; @import:123&lt;style type="text/css" media="screen"&gt; @import url("CSS文件"); &lt;/style&gt; 两者都是外部引用CSS的方式，但是存在一定的区别： link是XHTML标签，除了加载CSS外，还可以定义RSS等其他事务； @import属于CSS范畴，只能加载CSS。 link引用CSS时，在页面载入时同时加载； @import需要页面网页完全载入以后加载。 link是XHTML标签，无兼容问题； @import是在CSS2.1提出的，低版本的浏览器不支持。 link支持使用Javascript控制DOM去改变样式； @import不支持。 HTML的Doctype和严格模式与混杂模式&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于&lt;html&gt;标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档浏览器根据DOCTYPE是否存在以及使用的哪种DTD来选择要使用的呈现方法 文档类型(DTD)DTD（文档类型定义）是一组机器可读的规则，他们定义 XML(可扩展标记语言) 或 HTML(超文本标记语言)的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。浏览器通过分析页面的DOCTYPE 声明来了解要使用哪个 DTD ，由此知道要使用 HTML 的哪个版本。 DOCTYPE 当前有两种风格，严格（ strict ）和过渡（ transitional ）。过渡 DOCTYPE 的目的是帮助开发人员从老版本迁移到新版本。 如果发送具有正确的 MIME 类型的 XHTML 文档，理解 XML 的浏览器将不显示无效的页面。 浏览器模式浏览器有两种呈现模式：标准模式和混杂模式（quirks mode）。 在标准模式中，浏览器根据规范呈现页面； 在混杂模式中，页面以一种比较宽松的向后兼容的方式显示。 DOCTYPE 切换对于 HTML 4.01 文档， ​ 包含严格 DTD 的 DOCTYPE 常常导致页面以标准模式呈现。 ​ 包含过度 DTD 和 URI 的 DOCTYPE 也导致页面以标准模式呈现。 ​ 但是有过度 DTD 而没有 URI 会导致页面以混杂模式呈现。 ​ DOCTYPE 不存在或形式不正确会导致 HTML 和 XHTML 文档以混杂模式呈现。 HTTP状态码200 - 服务器成功返回网页404 - 请求的网页不存在503 - 服务不可用302 -临时移动。服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 web storagesessionStorage：存储特定于某个会话的数据，该数据只保留到浏览器关闭。 globalStorage：目的是跨越会话存储数据，不过要指定哪些域可以访问该数据。如果不使用 removeItem() 或 delete 删除，或者用户未清除浏览器缓存，存储在globalStorage上的数据会一直保留在磁盘上。所以globalStorage非常适合在客户端存储文档或长期保留用户偏好设置。 localStorage：在HTML5中作为持久保持客户端数据的方案取代了globalStorage。它不能被指定访问规则，要访问localStorage，页面必须来自同一个域名，使用同一种协议，在同一个端口上。它的数据也保留到通过JavaScript删除或用户清除浏览器缓存。 jquery ajax中支持的数据类型xmlhtmljsonpjson]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html-标签a]]></title>
    <url>%2F2018%2F04%2F09%2Fhtml-%E6%A0%87%E7%AD%BEa%2F</url>
    <content type="text"><![CDATA[&lt;a&gt;的属性href=””链接地址，可为绝对路径或相对路径，如： href=”http://www.w3school.com.cn/“ href=”../index.html” 用id链接到元素在链接后加#，再加id标识符，即可在链接中链接到页面的特定目标（此id标签所在的位置） &lt;a href=”index.thml#coffee“&gt;see coffee&lt;/a&gt; title=””为链接添加标题以访问 大部分情况下，标题会显示为一个工具提示：鼠标移动到链接上，会显示title中的文字 target=””target=”_blank”：浏览器总是打开新窗口（新标签页）显示链接]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18.3.30前端笔记]]></title>
    <url>%2F2018%2F03%2F30%2F18-3-30%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[标签元素类型在CSS中，html中的标签元素大体被分为三种不同的类型： 块状元素、内联元素(又叫行内元素)和内联块状元素 常用的块级元素有： &lt;div&gt;、&lt;p&gt;、&lt;h1&gt;…&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt; 设置display:block就是将元素显示为块级元素。如：a{display:block;} 块级元素特点： 1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）; 2、元素的高度、宽度、行高以及顶和底边距都可设置。 3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。 常用的内联元素有： &lt;span&gt;、&lt;a&gt;、&lt;label&gt;、&lt;strong&gt; 、&lt;em&gt;、&lt;i&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt; 、&lt;br&gt; 块状元素可以通过代码display:inline将元素设置为内联元素。如：div{ display:inline; } 内联元素特点： 1、和其他元素都在一行上； 2、元素的高度、宽度及顶部和底部边距不可设置； 3、元素的宽度就是它包含的文字或图片的宽度，不可改变。 常用的内联块状元素有： &lt;img&gt;、&lt;input&gt; 设置display:inline-block将元素设置为内联块状元素。 inline-block 元素特点： 1、和其他元素都在一行上； 2、元素的高度、宽度、行高以及顶和底边距都可设置。 背景图片属性background-attachment：定义背景图片随滚动轴的移动方式 取值: scroll | fixed | inherit scroll: 随着页面的滚动轴背景图片将移动 fixed: 随着页面的滚动轴背景图片不会移动 inherit: 继承父元素background-attachment 的属性 background-origin： 属性规定 background-position 属性相对于什么位置来定位。 background-clip：属性规定背景的绘制区域。 position属性position属性有四个可选值，它们分别是：static、absolute、fixed、relative。 ◆position:static 无定位 ​ 所有元素定位的默认情况。一般情况下，我们不需要特别声明它，但在不希望元素受所继承的属性影响时，可以用position:static取消继承，还原元素定位的默认值。 ​ 元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。 ◆position:absolute 绝对定位 ​ 元素框从文档流完全删除，相对于 static 定位以外的第一个父元素进行定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。 ◆position:fixed 相对于窗口的固定定位 ​ 元素的定位方式同absolute类似，但它的包含块是视区本身，相对于浏览器窗口进行定位。在屏幕媒体如WEB浏览器中，元素在文档滚动时不会在浏览器视察中移动。例如，它允许框架样式布局。在页式媒体如打印输出中，一个固定元素会出现于第一页的相同位置。这一点可用于生成流动标题或脚注。我们也见过相似的效果，但大都数效果不是通过CSS来实现了，而是应用了JS脚本。 ​ 注意，IE6不支持CSS中的position:fixed属性 ◆position:relative 相对定位 ​ 元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。相对定位是相对于元素默认的位置的定位。我们需要设置top、bottom、left、right值来声明定位在哪里，明确元素的位置。 清除浮动 在浮动元素末尾添加一个空的标签例如 通过设置父元素overflow值为hidden； 父元素也设置浮动（不推荐） 给父元素添加clearfix类（伪类） 使被点击访问过的超链接样式仍具有hover和active改变CSS属性的排列顺序为：a:link {} a:visited {} a:hover {} a:active {} 为了符合浏览器解析CSS所遵循的就近原则，将一般的放在上面，将特殊的放在下面： a:hover必须放在a:link和a:visited之后； a:active必须放在a:hover之后。 记（驴lv哈ha） BFC（块级格式化上下文）创建了 BFC的元素就是一个独立的盒子，不过只有Block-level box可以参与创建BFC， 它规定了内部的Block-level Box如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。 内部的Box会在垂直方向，从顶部开始一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC的区域不会与float的元素区域重叠计算BFC的高度时，浮动子元素也参与计算BFC就是页面上的一个隔离的独立容器，容器里面的子元素是不会影响到外面的元素]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18.3.29前端笔记]]></title>
    <url>%2F2018%2F03%2F29%2F18.3.29%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[屏幕的尺寸标准 超小屏幕（手机） 小屏幕（平板） 中等屏幕（桌面） 大屏幕（桌面） 尺寸 &lt;768px &gt;=768 &gt;=992 &gt;=1200 类前缀 .col-xs- .col-sm- .col-md- .col-lg- 选择器的优先级 优先级 权重 在属性后面使用 !important 会覆盖页面内任何位置定义的元素样式 作为style属性写在元素内的样式（内联样式） id选择器 100 类选择器 10 伪类选择器 10 属性选择器 10 标签选择器 1 伪元素选择器 1 通配符选择器 0 优先级是：内联样式 &gt; id 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器 多个选择器组合的时候，不应该简单地给这些选择器分配权值，然后相加比较大小。因为优先级是不能越级的，比方说 1 个 id 选择器能顶你 n 个类选择器…所以要逐级比较，同级的就比较数量，数量多的优先级高。 当然，!important 的优先级最高。 标签的嵌套&lt;li&gt; 标签定义列表项目。&lt;li&gt; 标签可用在有序列表 (&lt;ol&gt;) 和无序列表 (&lt;ul&gt;) 中。&lt;dl&gt;标签定义了一个定义列表，定义列表中的条目是通过使用&lt;dt&gt;标记(“definition title”，定义标题)和&lt;dd&gt;标记(“definition description”，定义描述)创建的。&lt;dt&gt;给出了术语名，&lt;dd&gt;标记给出了术语的定义。&lt;table&gt;代表表格&lt;/table&gt;&lt;tr&gt;代表表格中的一行&lt;/tr&gt;&lt;td&gt;代表表格中的一列&lt;/td&gt; &lt;ul&gt;里面只能放&lt;li&gt;，但是&lt;li&gt;里面可以放,&lt;p&gt;等标签。 dt标签和dd标签必须嵌套在dl标签里面，并且dt标签必须位于dd标签前面； tr标签和td标签必须嵌套在table标签里面，其中td标签必须位于tr标签里面。 &lt;ul&gt;&lt;li&gt; &lt;/li&gt;&lt;/ul&gt; &lt;ol&gt;&lt;li&gt; &lt;/li&gt;&lt;/ol&gt; &lt;dl&gt;&lt;dt&gt; &lt;/dt&gt;&lt;dd&gt; &lt;/dd&gt;&lt;/dl&gt; &lt;table&gt;&lt;tr&gt;&lt;td&gt; &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; Ajax与Flash的优缺点 Ajax Flash 优势 1.可搜索性 2.开放性 3.费用 4.易用性 5.易于开发 1.多媒体处理 2.兼容性 3.矢量图形 4.客户端资源调度 劣势 1.它可能破坏浏览器的后退功能 2.使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中 ，不过这些都有相关方法解决 1.二进制格式 2.格式私有 3.flash 文件经常会很大，用户第一次使用的时候需要忍耐较长的等待时间 4.性能问题 Ajax的优势 可搜索性 普通的文本网页会更有利于SEO。文本内容是搜索引擎容易检索的，而繁琐的swf字节码却是搜索引擎不愿触及的。虽然Google等一些大型的搜索引擎可以检索SWF内部的内容，但是仍然有很多麻烦存在。 开放性 Flash常年以来被Macromedia看的很死。包括Flex、FMS等辅佐技术一直都需要昂贵的安装、维护费用。而JS则没有这样的麻烦。没有人愿意承担法律和版权的风险。 费用 Flash开发是很昂贵的，因为FlashIDE等环境都是要收费的．而Ajax则不同．虽然有一些便宜的生成swf的工具，但是他们的工能实在无法满足复杂需求。 易用性 Ajax程序有更好的易用性。由于中间有一层Flashplayer代理层，因此许多辅助功能无法被Flash灵活利用。而且Flash在一些方面有着不好的口碑。比如弹出广告、比如恶意代码。 易于开发 人们开发复杂的Ajax和Flash应用程序时，都会借助一些高级的开发工具。普遍来说，Ajax的开发包比Flash简便、容易。 Flash的优势 多媒体处理 Flash在音频、视频等多媒体领域相比HTML有绝对的优势。现在几乎所有的网站都包含有Flash内容。 兼容性 兼容性好：由于通过了唯一的FlashPlayer“代理”。人们不必像调试JS那样，在不同的浏览器中调试程序。 矢量图型 这是Flash最大的优势，同样处在这一领域的SVG、Canvas element以及Direct完全不能与Flash相比。 客户端资源调度 Flash能够更容易的调用浏览器以外的外部资源。比如摄像头、麦克风等。然而这是普通的HTML无法完成的。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery选择器]]></title>
    <url>%2F2018%2F03%2F23%2FjQuery%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[基本选择器1234$("#id") //ID选择器$("div") //元素选择器$(".classname") //类选择器$(".classname,.classname1,#id1") //组合选择器 层次选择器1234$("#id&gt;.classname ") //子元素选择器$("#id .classname ") //后代元素选择器$("#id + .classname ") //紧邻下一个元素选择器$("#id ~ .classname ") //兄弟元素选择器 ==过滤选择器==基本过滤选择器12345678$("li:first") //第一个li$("li:last") //最后一个li$("li:even") //挑选下标为偶数的li$("li:odd") //挑选下标为奇数的li$("li:eq(4)") //下标等于4的li$("li:gt(2)") //下标大于2的li$("li:lt(2)") //下标小于2的li$("li:not(#runoob)") //挑选除 id="runoob" 以外的所有li 内容过滤选择器1234$("div:contains('Runob')") // 包含 Runob文本的元素$("td:empty") //不包含子元素或者文本的空元素$("div:has(selector)") //含有选择器所匹配的元素$("td:parent") //含有子元素或者文本的元素 可见性过滤选择器12$("li:hidden") //匹配所有不可见元素，或type为hidden的元素$("li:visible") //匹配所有可见元素 属性过滤选择器12345678$("div[id]") //所有含有 id 属性的 div 元素$("div[id='123']") // id属性值为123的div 元素$("div[id!='123']") // id属性值不等于123的div 元素$("div[id^='qq']") // id属性值以qq开头的div 元素$("div[id$='zz']") // id属性值以zz结尾的div 元素$("div[id~='aa']") // id属性值为aa的div 元素$("div[id*='bb']") // id属性值包含bb的div 元素$("input[id][name$='man']") //多属性选过滤，同时满足两个属性的条件的元素 状态过滤选择器1234$("input:enabled") // 匹配可用的 input$("input:disabled") // 匹配不可用的 input$("input:checked") // 匹配选中的 input$("option:selected") // 匹配选中的 option 表单选择器123456789$(":input") //匹配所有 input, textarea, select 和 button 元素$(":text") //所有的单行文本框，$(":text") 等价于$("[type=text]")，推荐使用$("input:text")效率更高，下同$(":password") //所有密码框$(":radio") //所有单选按钮$(":checkbox") //所有复选框$(":submit") //所有提交按钮$(":reset") //所有重置按钮$(":button") //所有button按钮$(":file") //所有文件域 转自菜鸟教程]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs笔记]]></title>
    <url>%2F2018%2F03%2F21%2Fnodejs%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[常用网站 nodejs.org看看nodejs的版本升级，新特性的加入，重要bug的修复等 www.npmjs.com模块社区，看他人源代码，省力 github.com大量的项目和源码 stackoverflow.com技术解答社区以及查询相关资源，环境配置，异常均可找到答案]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[牛顿迭代法求平方根]]></title>
    <url>%2F2018%2F03%2F19%2F%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9%2F</url>
    <content type="text"><![CDATA[牛顿迭代法从函数意义上理解：我们是要求函数f(x) = x²，使f(x) = num的近似解，即x² - num = 0的近似解。 从几何意义上理解：我们是要求抛物线g(x) = x² - num与x轴交点（g(x) = 0）最接近的点。 我们假设g(x0)=0，即x0是正解，那么我们要做的就是让近似解x不断逼近x0。 先任取一个初始值xi，经过这个点（xi,f(xi)）的切线方程为 f(x) = f(xi) + f′(xi)(x−xi)，令切线方程等于0 (纵轴截距取0)，即可求出： 可以由此得到 从几何图形上看，因为导数是切线，通过不断迭代，导数与x轴的交点会不断逼近x0。 123456789def mySqrt(self, x): """ :type x: int :rtype: int """ r = x while r*r &gt; x: r = (r + x/r) / 2 return r]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python数据结构-链表]]></title>
    <url>%2F2018%2F03%2F18%2Fpython%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[python实现链表依赖于类生成的实例，每个节点都是一个对象，组合在一起形成一个完整链表 对于node类只需关注两点：value 和 next对于linked_list需要关心的：head（头结点，默认是node），length（列表的长度） 链表的数据结构如下图所示： 链表的实现定义链表定义节点类Node123456789101112class Node: def __init__(self, value): ''' value: 节点保存的数据，next: 保存下一个节点对象 ''' self.val = value self.next = None def __repr__(self): ''' 用来定义Node的字符输出，print为输出value ''' return str(self.value) 操作链表定义链表类LinkedList链表要包括：属性：链表头：head链表长度：length 方法： is_empty() 链表是否为空 add(item) 链表头部添加元素 append(item) 链表尾部添加元素 insert(index, item) 指定位置添加元素 delete(index) 删除指定位置节点 remove(item) 删除某个数值节点 search(item) 查找节点是否存在 判断是否为空: is_Empty()12def is_empty(self): return self.length == 0 头部添加一个节点：add()123456def add(self, item): node = Node(item) # 将新节点的链接域next指向头节点，即head指向的位置 node.next = self.head # 将链表的头head指向新节点 self.head = node 尾部添加一个节点：append()12345678910111213def append(self, item): # 确保item是node对象 item = Node(item) # 先判断链表是否为空，若是空链表，则将head指向新节点 if self.is_empty(): self.head = node # 若不为空，则找到尾部，将尾节点的next指向新节点 else: node = self.head while node.next: node = node.next node.next = item self.length += 1 指定位置添加节点：insert()12345678910111213141516171819202122def insert(self, index, item): # 若指定位置pos为第一个元素之前，则执行头部插入 if index &lt;= 0: self.add(item) # 若指定位置超过链表尾部，则执行尾部插入 elif index &gt; (self.length()-1): self.append(item) # 找到指定位置 else: node = Node(item) # 从头节点开始移动到插入位置的前一个节点 pre = self.head while index-1: pre = pre.next index -= 1 # 先将新节点node的next指向插入位置的节点 node.next = pre.next # 将插入位置的前一个节点的next指向新节点 pre.next = node self.length += 1 删除数值是item的节点：remove(item)12345678910111213141516171819def remove(self, item): pre = None # 前一个节点 cur = self.head # 当前节点 while cur: # 找到了指定元素 if cur.item == item: # 如果第一个就是删除的节点 if not pre: # 将头指针指向头节点的后一个节点 self.head = cur.next else: # 将删除位置前一个节点的next指向删除位置的后一个节点 pre.next = cur.next self.length -= 1 break else: # 继续按链表后移节点 pre = cur cur = cur.next 删除某个位置的节点：delete(index)123456789101112131415def delete(self, index): if index &gt; self.length: # 索引值超出范围直接提示并且退出 print("Index is out of range.") return else: if index == 0: self.head = self.head.next else: pre = self.head while index - 1: pre = pre.next index -= 1 pre.next = pre.next.pnext self.length -= 1 查找节点是否存在：search()12345678def search(self,item): """链表查找节点是否存在，并返回True或者False""" cur = self.head while cur != None: if cur.item == item: return True cur = cur.next return False]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客-优化篇]]></title>
    <url>%2F2018%2F03%2F15%2Fhexo%E5%8D%9A%E5%AE%A2-%E4%BC%98%E5%8C%96%E7%AF%87%2F</url>
    <content type="text"><![CDATA[在文章中插入图片在source目录下新建一个img文件夹，将图片放入该文件夹下 插入图片时将链接写为/img/图片名称 设置鼠标经过头像时头像旋转打开\themes\next\source\css\_common\components\sidebar\sidebar-author.styl，在里面添加如下代码即可： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; 设置侧边栏的社交图标打开主题配置文件themes\next\_config.yml，搜索social_icons,在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可 注意：第一次操作时记得将social和你希望添加的社交地址前面的#去掉 为文章添加阴影边框打开\themes\next\source\css\_custom\custom.styl,向里面加入：12345678// 主页文章添加阴影效果 .post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5); &#125; 在网站底部添加访问量打开\themes\next\layout\_partials\footer.swig文件,在copyright前添加async src123456```&lt;div class=&quot;powered-by&quot;&gt;&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt; 如下图所示： 为文章实现统计功能在根目录下安装 hexo-wordcount,运行： 1$ npm install hexo-wordcount --save 打开主题配置文件themes\next\_config.yml，配置如下： 123456# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true 这时我们发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等单位，所以接下来打开themes\next\layout\_macro\post.swig文件在对应为位置添加如下字样： 刷新之后出现乱码将文件保存为UTF-8即可解决 首页文章设置为只显示预览打开主题配置文件themes\next\_config.yml搜索”auto_excerpt”,找到如下部分：12345# Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: false length: 150 把enable改为对应的false改为true即可 在文章底部添加jiathis分享打开主题配置文件themes\next\_config.yml中，设置jiathis: true，即打开了jiathis分享，如下图所示： 想自定义话，打开themes\next\layout\_partials\share\jiathis.swig修改每一个部分就可以了 class123456789&lt;span class=&quot;jiathis_txt&quot;&gt;分享到：&lt;/span&gt; &lt;a class=&quot;jiathis_button_fav&quot;&gt;收藏夹&lt;/a&gt; &lt;a class=&quot;jiathis_button_copy&quot;&gt;复制网址&lt;/a&gt; &lt;a class=&quot;jiathis_button_email&quot;&gt;邮件&lt;/a&gt; &lt;a class=&quot;jiathis_button_weixin&quot;&gt;微信&lt;/a&gt; &lt;a class=&quot;jiathis_button_cqq&quot;&gt;QQ&lt;/a&gt; &lt;a class=&quot;jiathis_button_tsina&quot;&gt;新浪微博&lt;/a&gt; &lt;a class=&quot;jiathis_button_douban&quot;&gt;豆瓣&lt;/a&gt; &lt;a class=&quot;jiathis_button_share&quot;&gt;一键分享&lt;/a&gt; 修改文章底部标签的“#”打开\themes\next\layout\_macro\post.swig 搜索 rel=&quot;tag&quot;&gt;# 将 # 换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;即可]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文档坐标和视口坐标]]></title>
    <url>%2F2018%2F03%2F14%2F%E6%96%87%E6%A1%A3%E5%9D%90%E6%A0%87%E5%92%8C%E8%A7%86%E5%8F%A3%E5%9D%90%E6%A0%87%2F</url>
    <content type="text"><![CDATA[文档坐标和视口坐标视口坐标是相对于窗口的坐标，而文档坐标是相对于整个文档而言。例如，在文档坐标中如果一个元素的相对于文档的Y坐标是200px，并且用户已经把浏览器向下滚动了75px，那么视口坐标中元素的Y坐标为200px– 75px = 125px。]]></content>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我]]></title>
    <url>%2Fabout%2Findex.html</url>
    <content type="text"><![CDATA[关于我“程序媛”，“研究僧” 学习前端的小菜鸟 探索算法的兴趣者 热爱记录，乐于分享的伪文青]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[tags]]></title>
    <url>%2Ftags%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
