<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>word-快速输入数学公式</title>
      <link href="/2018/05/04/word-%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2018/05/04/word-%E5%BF%AB%E9%80%9F%E8%BE%93%E5%85%A5%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2018/04/13/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2018/04/13/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>​       HTTP协议（Hyper Text Transfer Protocol，超文本传输协议）,是用于从万维网（WWW:World    Wide Web ）服务器传输超文本到本地浏览器的传送协议。 </p><p>​       HTTP基于TCP/IP通信协议来传递数据。</p><p>​       HTTP基于客户端/服务端（C/S）架构模型，通过一个可靠的链接来交换信息，是一个无状态的请求/响应协议。</p><h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2.特点"></a>2.特点</h3><p>​      （1）HTTP是<strong>无连接</strong>：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p><p>​      （2）HTTP是<strong>媒体独立的</strong>：只要客户端和服务器知道如何处理的数据内容，任何类型的数据都可以通过HTTP发送。客户端以及服务器指定使用适合的MIME-type内容类型。</p><p>​      （3）HTTP是<strong>无状态</strong>：无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p><h3 id="3-通信流程"><a href="#3-通信流程" class="headerlink" title="3.通信流程"></a>3.通信流程</h3><p>​    <img src="https://uploadfiles.nowcoder.net/files/20160727/213669_1469604624728_cgiarch.gif" alt="img"> </p><h3 id="4-消息结构"><a href="#4-消息结构" class="headerlink" title="4.消息结构"></a>4.消息结构</h3><p>​       HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。一旦建立连接后，数据消息就通过类似Internet邮件所使用的格式[RFC5322]和多用途Internet邮件扩展（MIME）[RFC2045]来传送。 </p><p><strong>客户端请求消息：请求行、请求头部、空行和请求数据。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/2964446-fdfb1a8fce8de946.png?imageMogr2/auto-orient/strip%7CimageView2/2" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请求行    GET /hello.txt HTTP/1.1   (说明请求类型:要访问的资源以及所使用的HTTP版本)</span><br><span class="line">请求头部  User-Agent: curl/7.16.3 libcurl/7.16.3</span><br><span class="line">         OpenSSL/0.9.7l zlib/1.2.3 </span><br><span class="line">         Host: www.example.com Accept-Language: en, mi</span><br><span class="line">空行</span><br><span class="line">请求数据</span><br></pre></td></tr></table></figure><p><strong>服务端响应消息：状态行、消息报头、空行和响应正文。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">状态行      HTTP/1.1 200 OK         </span><br><span class="line">消息报头     Date: Mon, 27 Jul 2009 12:28:53 GMT         </span><br><span class="line">            Server: Apache         </span><br><span class="line">            Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT         </span><br><span class="line">            ETag: &quot;34aa387-d-1568eb00&quot;         </span><br><span class="line">            Accept-Ranges: bytes         </span><br><span class="line">            Content-Length: 51         </span><br><span class="line">            Vary: Accept-Encoding         </span><br><span class="line">            Content-Type: text/plain</span><br><span class="line">空行</span><br><span class="line">响应正文     &lt;html&gt;</span><br><span class="line">            &lt;head&gt;&lt;/head&gt;</span><br><span class="line">              &lt;body&gt;</span><br><span class="line">                 &lt;!--body goes here--&gt;</span><br><span class="line">                &lt;/body&gt;</span><br><span class="line">            &lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="5-请求方法"><a href="#5-请求方法" class="headerlink" title="5.请求方法"></a>5.请求方法</h3><p>GET 请求指定的页面信息，并返回实体主体。 </p><p>HEAD  类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头 </p><p>POST  向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p><p>PUT 从客户端向服务器传送的数据取代指定的文档的内容。 </p><p>DELETE  请求服务器删除指定的页面。 </p><p>CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</p><p>OPTIONS 允许客户端查看服务器的性能。 </p><p>TRACE   回显服务器收到的请求，主要用于测试或诊断。</p><p>###6.状态码 </p><p><strong>HTTP状态码分类</strong></p><p>​    1** 信息，服务器收到请求，需要请求者继续执行操作 </p><p>​    2** 成功，操作被成功接收并处理 </p><p>​    3** 重定向，需要进一步的操作以完成请求 </p><p>​    4** 客户端错误，请求包含语法错误或无法完成请求 </p><p>​    5** 服务器错误，服务器在处理请求的过程中发生了错 </p><p><strong>HTTP状态码列表</strong> </p><p>100 Continue   继续。客户端应继续其请求 </p><p>101 Switching Protocols   切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议 </p><p><strong>200 OK  请求成功。一般用于GET与POST请求</strong> </p><p>201 Created 已创建。成功请求并创建了新的资源</p><p>202 Accepted   已接受。已经接受请求，但未处理完成 </p><p>203 Non-Authoritative Information   非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本 </p><p>204 No Content   无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档 </p><p>205 Reset Content   重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域 </p><p>206 Partial Content 部分内容。服务器成功处理了部分GET请求</p><p>300 Multiple Choices  多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择 </p><p><strong>301 Moved Permanently   永久移动。</strong>请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替 </p><p>302 Found   临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI</p><p>303 See Other   查看其它地址。与301类似。使用GET和POST请求查看 </p><p><strong>304 Not Modified    未修改。</strong>所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源 </p><p>305 Use Proxy   使用代理。所请求的资源必须通过代理访问 </p><p>306 Unused  已经被废弃的HTTP状态码</p><p><strong>307 Temporary Redirect  临时重定向。</strong>与302类似。使用GET请求重定向 </p><p>400 Bad Request 客户端请求的语法错误，服务器无法理解 </p><p>401 Unauthorized  请求要求用户的身份认证</p><p>402 Payment Required    保留，将来使用 </p><p>403 Forbidden   服务器理解请求客户端的请求，但是拒绝执行此请求</p><p><strong>404 Not Found   服务器无法根据客户端的请求找到资源（网页）。</strong>通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面 </p><p>405 Method Not Allowed  客户端请求中的方法被禁止 </p><p>406 Not Acceptable  服务器无法根据客户端请求的内容特性完成请求 </p><p>407 Proxy Authentication Required  请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权 </p><p>408 Request Time-out    服务器等待客户端发送的请求时间过长，超时 </p><p>409 Conflict  服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突 </p><p>410 Gone  客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置 </p><p>411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息 </p><p>412 Precondition Failed 客户端请求信息的先决条件错误 </p><p>413 Request Entity Too Large   由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息 </p><p>414 Request-URI Too Large   请求的URI过长（URI通常为网址），服务器无法处理</p><p>415 Unsupported Media Type  服务器无法处理请求附带的媒体格式 </p><p>416 Requested range not satisfiable 客户端请求的范围无效 </p><p>417 Expectation Failed  服务器无法满足Expect的请求头信息 </p><p><strong>500 Internal Server Error   服务器内部错误，无法完成请求</strong> </p><p>501 Not Implemented 服务器不支持请求的功能，无法完成请求 </p><p>502 Bad Gateway 充当网关或代理的服务器，从远端服务器接收到了一个无效的请求 </p><p>503 Service Unavailable   由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中 </p><p>504 Gateway Time-out   充当网关或代理的服务器，未及时从远端服务器获取请求 </p><p>505 HTTP Version not supported  服务器不支持请求的HTTP协议的版本，无法完成处理</p>]]></content>
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.4.11前端笔记</title>
      <link href="/2018/04/11/18.4.11%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/11/18.4.11%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="link和-import"><a href="#link和-import" class="headerlink" title="link和@import"></a>link和@import</h1><p>页面中使用CSS的方式主要有3种：行内添加定义style属性值，页面头部内嵌调用和外面链接调用.</p><p>其中<strong>外面引用</strong>有两种：link和@import。方式分别是：</p><p>link:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">rev</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS文件"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>@import:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"> </span></span><br><span class="line"><span class="undefined">@import url("CSS文件"); </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>两者都是外部引用CSS的方式，但是存在一定的区别：</p><ol><li><p>link是<strong>XHTML</strong>标签，除了加载CSS外，还可以定义RSS等其他事务；</p><p>@import属于<strong>CSS</strong>范畴，只能加载CSS。</p></li><li><p>link引用CSS时，在页面载入时<strong>同时加载</strong>；</p><p>@import需要页面网页完全<strong>载入以后加载</strong>。</p></li><li><p>link是XHTML标签，无兼容问题；</p><p>@import是在CSS2.1提出的，<strong>低版本的浏览器不支持</strong>。</p></li><li><p>link支持使用<strong>Javascript控制DOM去改变样式</strong>；</p><p>@import不支持。</p></li></ol><h1 id="HTML的Doctype和严格模式与混杂模式"><a href="#HTML的Doctype和严格模式与混杂模式" class="headerlink" title="HTML的Doctype和严格模式与混杂模式"></a>HTML的Doctype和严格模式与混杂模式</h1><p>&lt;!DOCTYPE&gt; 声明位于文档中的最前面，处于&lt;html&gt;标签之前。告知浏览器的解析器，用什么文档类型 规范来解析这个文档<br>浏览器根据DOCTYPE是否存在以及使用的哪种DTD来选择要使用的呈现方法</p><h3 id="文档类型-DTD"><a href="#文档类型-DTD" class="headerlink" title="文档类型(DTD)"></a>文档类型(DTD)</h3><p>DTD（文档类型定义）是一组机器可读的规则，他们定义 <strong>XML</strong>(可扩展标记语言) 或 <strong>HTML</strong>(超文本标记语言)的特定版本中允许有什么，不允许有什么。在解析网页时，浏览器将使用这些规则检查页面的有效性并且采取相应的措施。浏览器通过分析页面的DOCTYPE 声明来了解要使用哪个 DTD ，由此知道要使用 HTML 的哪个版本。 </p><p>DOCTYPE 当前有两种风格，<strong>严格</strong>（ strict ）和<strong>过渡</strong>（ transitional ）。过渡  DOCTYPE 的目的是帮助开发人员从老版本迁移到新版本。 </p><p>如果发送具有正确的 MIME 类型的 XHTML 文档，理解 XML 的浏览器将不显示无效的页面。</p><h3 id="浏览器模式"><a href="#浏览器模式" class="headerlink" title="浏览器模式"></a>浏览器模式</h3><p>浏览器有两种呈现模式：标准模式和混杂模式（quirks  mode）。</p><p>在<strong>标准</strong>模式中，浏览器根据规范呈现页面；</p><p>在<strong>混杂</strong>模式中，页面以一种比较宽松的向后兼容的方式显示。 </p><h3 id="DOCTYPE-切换"><a href="#DOCTYPE-切换" class="headerlink" title="DOCTYPE 切换"></a>DOCTYPE 切换</h3><p>对于 HTML 4.01 文档， </p><ul><li>​     包含<strong>严格</strong> DTD 的 DOCTYPE 常常导致页面以<strong>标准</strong>模式呈现。 </li><li>​     包含<strong>过度</strong> DTD 和 URI 的 DOCTYPE 也导致页面以<strong>标准</strong>模式呈现。 </li><li>​     但是有过度 DTD 而没有 URI 会导致页面以<strong>混杂</strong>模式呈现。 </li><li>​     DOCTYPE <strong>不存在或形式不正确会</strong>导致 HTML 和 XHTML 文档以<strong>混杂模式</strong>呈现。</li></ul><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><p>200 - 服务器成功返回网页<br>404 - 请求的网页不存在<br>503 - 服务不可用<br>302 -临时移动。服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。 </p><h1 id="web-storage"><a href="#web-storage" class="headerlink" title="web storage"></a>web storage</h1><p><strong>sessionStorage：</strong>存储特定于某个会话的数据，该<strong>数据只保留到浏览器关闭</strong>。 </p><p><strong>globalStorage：</strong>目的是跨越会话存储数据，不过要指定哪些域可以访问该数据。如果不使用  removeItem() 或 delete  删除，或者用户未清除浏览器缓存，存储在globalStorage上的数据会一直保留在磁盘上。所以globalStorage非常<strong>适合在客户端存储文档或长期保留用户偏好设置</strong>。 </p><p><strong>localStorage：</strong>在HTML5中作为<strong>持久保持客户端数据的方案取代了globalStorage</strong>。它不能被指定访问规则，要访问localStorage，页面必须来自同一个域名，使用同一种协议，在同一个端口上。它的数据也保留到通过JavaScript删除或用户清除浏览器缓存。</p><h1 id="jquery-ajax中支持的数据类型"><a href="#jquery-ajax中支持的数据类型" class="headerlink" title="jquery ajax中支持的数据类型"></a>jquery ajax中支持的数据类型</h1><p>xml<br>html<br>jsonp<br>json</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html-标签a</title>
      <link href="/2018/04/09/html-%E6%A0%87%E7%AD%BEa/"/>
      <url>/2018/04/09/html-%E6%A0%87%E7%AD%BEa/</url>
      <content type="html"><![CDATA[<h1 id="lt-a-gt-的属性"><a href="#lt-a-gt-的属性" class="headerlink" title="&lt;a&gt;的属性"></a>&lt;a&gt;的属性</h1><h2 id="href-””"><a href="#href-””" class="headerlink" title="href=””"></a>href=””</h2><p>链接地址，可为<strong>绝对路径</strong>或<strong>相对路径</strong>，如：</p><p>href=”<a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">http://www.w3school.com.cn/</a>“</p><p>href=”../index.html”</p><h3 id="用id链接到元素"><a href="#用id链接到元素" class="headerlink" title="用id链接到元素"></a>用id链接到元素</h3><p>在链接后加#，再加id标识符，即可在链接中链接到页面的特定目标（此id标签所在的位置）</p><p>&lt;a href=”index.thml<strong>#coffee</strong>“&gt;see coffee&lt;/a&gt;</p><h2 id="title-””"><a href="#title-””" class="headerlink" title="title=””"></a>title=””</h2><p>为链接添加标题以访问</p><p>大部分情况下，标题会显示为一个工具提示：鼠标移动到链接上，会显示title中的文字</p><h2 id="target-””"><a href="#target-””" class="headerlink" title="target=””"></a>target=””</h2><p>target=”_blank”：浏览器总是打开新窗口（新标签页）显示链接</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.3.30前端笔记</title>
      <link href="/2018/03/30/18-3-30%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/30/18-3-30%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="标签元素类型"><a href="#标签元素类型" class="headerlink" title="标签元素类型"></a>标签元素类型</h2><p>在CSS中，html中的标签元素大体被分为三种不同的类型： <strong>块状元素、内联元素(又叫行内元素)和内联块状元素</strong></p><ul><li><p><strong>常用的块级元素有：</strong></p><p>&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;…&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt; </p><p>设置display:block就是将元素显示为块级元素。如：a{display:block;}  </p><p><strong>块级元素特点：</strong> </p><p>   1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）; </p><p>   2、元素的高度、宽度、行高以及顶和底边距都可设置。 </p><p>   3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</p></li></ul><ul><li><p><strong>常用的内联元素有：</strong> </p><p>&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、&lt;strong&gt; 、&lt;em&gt;、&lt;i&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt; 、&lt;br&gt;</p><p>块状元素可以通过代码display:inline将元素设置为内联元素。如：div{ display:inline; } </p><p><strong>内联元素特点：</strong></p><p>  1、和其他元素都在一行上；</p><p>  2、元素的高度、宽度及顶部和底部边距不可设置；</p><p>  3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</p></li></ul><ul><li><p><strong>常用的内联块状元素有：</strong> </p><p>&lt;img&gt;、&lt;input&gt; </p><p>设置display:inline-block将元素设置为内联块状元素。 </p><p><strong>inline-block 元素特点：</strong> </p><p>  1、和其他元素都在一行上； </p><p>  2、元素的高度、宽度、行高以及顶和底边距都可设置。</p></li></ul><h2 id="背景图片属性"><a href="#背景图片属性" class="headerlink" title="背景图片属性"></a>背景图片属性</h2><p>background-attachment：定义背景图片随滚动轴的移动方式<br>    取值: scroll | fixed | inherit<br>    scroll: 随着页面的滚动轴背景图片将移动<br>    fixed: 随着页面的滚动轴背景图片不会移动<br>    inherit: 继承父元素background-attachment 的属性</p><p>background-origin： 属性规定 background-position 属性相对于什么位置来定位。</p><p>background-clip：属性规定背景的绘制区域。</p><h2 id="position属性"><a href="#position属性" class="headerlink" title="position属性"></a>position属性</h2><p>position属性有四个可选值，它们分别是：static、absolute、fixed、relative。</p><p><strong>◆position:static　无定位</strong></p><p>​    所有元素定位的默认情况。一般情况下，我们不需要特别声明它，但在不希望元素受所继承的属性影响时，可以用position:static取消继承，还原元素定位的默认值。</p><p>​    元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。</p><p><strong>◆position:absolute　绝对定位</strong></p><p>​     元素框从文档流完全删除，<strong>相对于 static 定位以外的第一个父元素进行定位</strong>。包含块可能是文档中的另一个元素或者是初始包含块。<strong>元素原先在正常文档流中所占的空间会关闭</strong>，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。</p><p><strong>◆position:fixed　相对于窗口的固定定位</strong></p><p>​    元素的定位方式同absolute类似，但它的包含块是视区本身，<strong>相对于浏览器窗口进行定位</strong>。在屏幕媒体如WEB浏览器中，元素在文档滚动时不会在浏览器视察中移动。例如，它允许框架样式布局。在页式媒体如打印输出中，一个固定元素会出现于第一页的相同位置。这一点可用于生成流动标题或脚注。我们也见过相似的效果，但大都数效果不是通过CSS来实现了，而是应用了JS脚本。</p><p>​    注意，IE6不支持CSS中的position:fixed属性</p><p><strong>◆position:relative　相对定位</strong></p><p>​    元素框偏移某个距离。元素仍保持其未定位前的形状，<strong>它原本所占的空间仍保留</strong>。相对定位是相对于元素默认的位置的定位。我们需要设置top、bottom、left、right值来声明定位在哪里，明确元素的位置。</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><ul><li><p>在浮动元素末尾添加一个空的标签例如 <div style="”clear:both”"></div></p></li><li><p>通过设置父元素overflow值为hidden；</p></li><li><p>父元素也设置浮动（不推荐）</p></li><li><p>给父元素添加clearfix类（伪类）</p></li></ul><h2 id="使被点击访问过的超链接样式仍具有hover和active"><a href="#使被点击访问过的超链接样式仍具有hover和active" class="headerlink" title="使被点击访问过的超链接样式仍具有hover和active"></a>使被点击访问过的超链接样式仍具有hover和active</h2><p>改变CSS属性的排列顺序为：<strong>a:link {} a:visited {} a:hover {} a:active {}</strong></p><p>为了符合浏览器解析CSS所遵循的就近原则，将一般的放在上面，将特殊的放在下面：</p><p>a:hover必须放在a:link和a:visited之后；</p><p>a:active必须放在a:hover之后。</p><p>记（驴lv哈ha）</p><h2 id="BFC（块级格式化上下文）"><a href="#BFC（块级格式化上下文）" class="headerlink" title="BFC（块级格式化上下文）"></a>BFC（块级格式化上下文）</h2><p>创建了 BFC的元素就是一个独立的盒子，不过只有Block-level box可以参与创建BFC， 它规定了内部的Block-level Box如何布局，并且与这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素。</p><p>内部的Box会在垂直方向，从顶部开始一个接一个地放置。</p><p>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生叠加</p><p>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</p><p>BFC的区域不会与float的元素区域重叠<br>计算BFC的高度时，浮动子元素也参与计算<br>BFC就是页面上的一个隔离的独立容器，容器里面的子元素是不会影响到外面的元素</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.3.29前端笔记</title>
      <link href="/2018/03/29/18.3.29%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/29/18.3.29%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="屏幕的尺寸标准"><a href="#屏幕的尺寸标准" class="headerlink" title="屏幕的尺寸标准"></a>屏幕的尺寸标准</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">超小屏幕（手机）</th><th style="text-align:center">小屏幕（平板）</th><th style="text-align:center">中等屏幕（桌面）</th><th style="text-align:center">大屏幕（桌面）</th></tr></thead><tbody><tr><td style="text-align:center">尺寸</td><td style="text-align:center">&lt;768px</td><td style="text-align:center">&gt;=768</td><td style="text-align:center">&gt;=992</td><td style="text-align:center">&gt;=1200</td></tr><tr><td style="text-align:center">类前缀</td><td style="text-align:center">.col-xs-</td><td style="text-align:center">.col-sm-</td><td style="text-align:center">.col-md-</td><td style="text-align:center">.col-lg-</td></tr></tbody></table><h2 id="选择器的优先级"><a href="#选择器的优先级" class="headerlink" title="选择器的优先级"></a>选择器的优先级</h2><table><thead><tr><th style="text-align:left">优先级</th><th>权重</th></tr></thead><tbody><tr><td style="text-align:left">在属性后面使用 !important 会覆盖页面内任何位置定义的元素样式</td><td></td></tr><tr><td style="text-align:left">作为style属性写在元素内的样式（内联样式）</td><td></td></tr><tr><td style="text-align:left">id选择器</td><td>100</td></tr><tr><td style="text-align:left">类选择器</td><td>10</td></tr><tr><td style="text-align:left">伪类选择器</td><td>10</td></tr><tr><td style="text-align:left">属性选择器</td><td>10</td></tr><tr><td style="text-align:left">标签选择器</td><td>1</td></tr><tr><td style="text-align:left">伪元素选择器</td><td>1</td></tr><tr><td style="text-align:left">通配符选择器</td><td>0</td></tr></tbody></table><p><strong>优先级是：内联样式 &gt; id 选择器 &gt; 类选择器 = 属性选择器 = 伪类选择器 &gt; 标签选择器 = 伪元素选择器</strong> </p><p>多个选择器组合的时候，不应该简单地给这些选择器分配权值，然后相加比较大小。因为优先级是不能越级的，比方说 1 个 id 选择器能顶你 n 个类选择器…所以要逐级比较，同级的就比较数量，数量多的优先级高。 当然，!important 的优先级最高。</p><h2 id="标签的嵌套"><a href="#标签的嵌套" class="headerlink" title="标签的嵌套"></a>标签的嵌套</h2><p>&lt;li&gt; 标签定义列表项目。&lt;li&gt; 标签可用在有序列表 (&lt;ol&gt;) 和无序列表 (&lt;ul&gt;) 中。<br>&lt;dl&gt;标签定义了一个定义列表，定义列表中的条目是通过使用&lt;dt&gt;标记(“definition title”，定义标题)和&lt;dd&gt;标记(“definition description”，定义描述)创建的。&lt;dt&gt;给出了术语名，&lt;dd&gt;标记给出了术语的定义。<br>&lt;table&gt;代表表格&lt;/table&gt;<br>&lt;tr&gt;代表表格中的一行&lt;/tr&gt;<br>&lt;td&gt;代表表格中的一列&lt;/td&gt;</p><ul><li>&lt;ul&gt;里面只能放&lt;li&gt;，但是&lt;li&gt;里面可以放<h*>,&lt;p&gt;等标签。 </h*></li><li>dt标签和dd标签必须嵌套在dl标签里面，并且dt标签必须位于dd标签前面；</li><li>tr标签和td标签必须嵌套在table标签里面，其中td标签必须位于tr标签里面。</li></ul><p><code>&lt;ul&gt;</code><br><code>&lt;li&gt; &lt;/li&gt;</code><br><code>&lt;/ul&gt;</code> </p><p><code>&lt;ol&gt;</code><br><code>&lt;li&gt; &lt;/li&gt;</code><br><code>&lt;/ol&gt;</code> </p><p><code>&lt;dl&gt;</code><br><code>&lt;dt&gt; &lt;/dt&gt;</code><br><code>&lt;dd&gt; &lt;/dd&gt;</code><br><code>&lt;/dl&gt;</code></p><p><code>&lt;table&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;td&gt; &lt;/td&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code></p><h2 id="Ajax与Flash的优缺点"><a href="#Ajax与Flash的优缺点" class="headerlink" title="Ajax与Flash的优缺点"></a>Ajax与Flash的优缺点</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Ajax</th><th style="text-align:center">Flash</th></tr></thead><tbody><tr><td style="text-align:center">优势</td><td style="text-align:center">1.可搜索性 2.开放性 3.费用 4.易用性 5.易于开发</td><td style="text-align:center">1.多媒体处理 2.兼容性 3.矢量图形 4.客户端资源调度</td></tr><tr><td style="text-align:center">劣势</td><td style="text-align:center">1.它可能破坏浏览器的后退功能   2.使用动态页面更新使得用户难于将某个特定的状态保存到收藏夹中 ，不过这些都有相关方法解决</td><td style="text-align:center">1.二进制格式 2.格式私有 3.flash 文件经常会很大，用户第一次使用的时候需要忍耐较长的等待时间  4.性能问题</td></tr></tbody></table><p><strong>Ajax的优势</strong></p><ul><li><p><strong>可搜索性</strong> </p><p>普通的文本网页会更有利于SEO。文本内容是搜索引擎容易检索的，而繁琐的swf字节码却是搜索引擎不愿触及的。虽然Google等一些大型的搜索引擎可以检索SWF内部的内容，但是仍然有很多麻烦存在。</p></li></ul><ul><li><p><strong>开放性</strong> </p><p>Flash常年以来被Macromedia看的很死。包括Flex、FMS等辅佐技术一直都需要昂贵的安装、维护费用。而JS则没有这样的麻烦。没有人愿意承担法律和版权的风险。</p></li></ul><ul><li><p><strong>费用</strong> </p><p>Flash开发是很昂贵的，因为FlashIDE等环境都是要收费的．而Ajax则不同．虽然有一些便宜的生成swf的工具，但是他们的工能实在无法满足复杂需求。</p></li></ul><ul><li><p><strong>易用性</strong> </p><p>Ajax程序有更好的易用性。由于中间有一层Flashplayer代理层，因此许多辅助功能无法被Flash灵活利用。而且Flash在一些方面有着不好的口碑。比如弹出广告、比如恶意代码。</p></li><li><p><strong>易于开发</strong> </p><p>人们开发复杂的Ajax和Flash应用程序时，都会借助一些高级的开发工具。普遍来说，Ajax的开发包比Flash简便、容易。</p></li></ul><p><strong>Flash的优势</strong> </p><ul><li><p><strong>多媒体处理</strong> </p><p>Flash在音频、视频等多媒体领域相比HTML有绝对的优势。现在几乎所有的网站都包含有Flash内容。</p></li></ul><ul><li><p><strong>兼容性</strong> </p><p>兼容性好：由于通过了唯一的FlashPlayer“代理”。人们不必像调试JS那样，在不同的浏览器中调试程序。</p></li></ul><ul><li><p><strong>矢量图型</strong> </p><p>这是Flash最大的优势，同样处在这一领域的SVG、Canvas element以及Direct完全不能与Flash相比。</p></li></ul><ul><li><p><strong>客户端资源调度</strong></p><p>Flash能够更容易的调用浏览器以外的外部资源。比如摄像头、麦克风等。然而这是普通的HTML无法完成的。</p></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery选择器</title>
      <link href="/2018/03/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2018/03/23/jQuery%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>)            <span class="comment">//ID选择器</span></span><br><span class="line">$(<span class="string">"div"</span>)            <span class="comment">//元素选择器</span></span><br><span class="line">$(<span class="string">".classname"</span>)     <span class="comment">//类选择器</span></span><br><span class="line">$(<span class="string">".classname,.classname1,#id1"</span>)     <span class="comment">//组合选择器</span></span><br></pre></td></tr></table></figure><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id&gt;.classname "</span>)    <span class="comment">//子元素选择器</span></span><br><span class="line">$(<span class="string">"#id .classname "</span>)    <span class="comment">//后代元素选择器</span></span><br><span class="line">$(<span class="string">"#id + .classname "</span>)    <span class="comment">//紧邻下一个元素选择器</span></span><br><span class="line">$(<span class="string">"#id ~ .classname "</span>)    <span class="comment">//兄弟元素选择器</span></span><br></pre></td></tr></table></figure><h2 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="==过滤选择器=="></a>==过滤选择器==</h2><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:first"</span>)    <span class="comment">//第一个li</span></span><br><span class="line">$(<span class="string">"li:last"</span>)     <span class="comment">//最后一个li</span></span><br><span class="line">$(<span class="string">"li:even"</span>)     <span class="comment">//挑选下标为偶数的li</span></span><br><span class="line">$(<span class="string">"li:odd"</span>)      <span class="comment">//挑选下标为奇数的li</span></span><br><span class="line">$(<span class="string">"li:eq(4)"</span>)    <span class="comment">//下标等于4的li</span></span><br><span class="line">$(<span class="string">"li:gt(2)"</span>)    <span class="comment">//下标大于2的li</span></span><br><span class="line">$(<span class="string">"li:lt(2)"</span>)    <span class="comment">//下标小于2的li</span></span><br><span class="line">$(<span class="string">"li:not(#runoob)"</span>) <span class="comment">//挑选除 id="runoob" 以外的所有li</span></span><br></pre></td></tr></table></figure><h3 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div:contains('Runob')"</span>)    <span class="comment">// 包含 Runob文本的元素</span></span><br><span class="line">$(<span class="string">"td:empty"</span>)                 <span class="comment">//不包含子元素或者文本的空元素</span></span><br><span class="line">$(<span class="string">"div:has(selector)"</span>)        <span class="comment">//含有选择器所匹配的元素</span></span><br><span class="line">$(<span class="string">"td:parent"</span>)                <span class="comment">//含有子元素或者文本的元素</span></span><br></pre></td></tr></table></figure><h3 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:hidden"</span>)       <span class="comment">//匹配所有不可见元素，或type为hidden的元素</span></span><br><span class="line">$(<span class="string">"li:visible"</span>)      <span class="comment">//匹配所有可见元素</span></span><br></pre></td></tr></table></figure><h3 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div[id]"</span>)        <span class="comment">//所有含有 id 属性的 div 元素</span></span><br><span class="line">$(<span class="string">"div[id='123']"</span>)        <span class="comment">// id属性值为123的div 元素</span></span><br><span class="line">$(<span class="string">"div[id!='123']"</span>)        <span class="comment">// id属性值不等于123的div 元素</span></span><br><span class="line">$(<span class="string">"div[id^='qq']"</span>)        <span class="comment">// id属性值以qq开头的div 元素</span></span><br><span class="line">$(<span class="string">"div[id$='zz']"</span>)        <span class="comment">// id属性值以zz结尾的div 元素</span></span><br><span class="line">$(<span class="string">"div[id~='aa']"</span>)        <span class="comment">// id属性值为aa的div 元素</span></span><br><span class="line">$(<span class="string">"div[id*='bb']"</span>)        <span class="comment">// id属性值包含bb的div 元素</span></span><br><span class="line">$(<span class="string">"input[id][name$='man']"</span>) <span class="comment">//多属性选过滤，同时满足两个属性的条件的元素</span></span><br></pre></td></tr></table></figure><h3 id="状态过滤选择器"><a href="#状态过滤选择器" class="headerlink" title="状态过滤选择器"></a>状态过滤选择器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"input:enabled"</span>)    <span class="comment">// 匹配可用的 input</span></span><br><span class="line">$(<span class="string">"input:disabled"</span>)   <span class="comment">// 匹配不可用的 input</span></span><br><span class="line">$(<span class="string">"input:checked"</span>)    <span class="comment">// 匹配选中的 input</span></span><br><span class="line">$(<span class="string">"option:selected"</span>)  <span class="comment">// 匹配选中的 option</span></span><br></pre></td></tr></table></figure><h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">":input"</span>)      <span class="comment">//匹配所有 input, textarea, select 和 button 元素</span></span><br><span class="line">$(<span class="string">":text"</span>)       <span class="comment">//所有的单行文本框，$(":text") 等价于$("[type=text]")，推荐使用$("input:text")效率更高，下同</span></span><br><span class="line">$(<span class="string">":password"</span>)   <span class="comment">//所有密码框</span></span><br><span class="line">$(<span class="string">":radio"</span>)      <span class="comment">//所有单选按钮</span></span><br><span class="line">$(<span class="string">":checkbox"</span>)   <span class="comment">//所有复选框</span></span><br><span class="line">$(<span class="string">":submit"</span>)     <span class="comment">//所有提交按钮</span></span><br><span class="line">$(<span class="string">":reset"</span>)      <span class="comment">//所有重置按钮</span></span><br><span class="line">$(<span class="string">":button"</span>)     <span class="comment">//所有button按钮</span></span><br><span class="line">$(<span class="string">":file"</span>)       <span class="comment">//所有文件域</span></span><br></pre></td></tr></table></figure><p><em>转自菜鸟教程</em></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs笔记</title>
      <link href="/2018/03/21/nodejs%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/21/nodejs%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="常用网站"><a href="#常用网站" class="headerlink" title="常用网站"></a>常用网站</h2><ol><li>nodejs.org看看nodejs的版本升级，新特性的加入，重要bug的修复等</li><li>www.npmjs.com模块社区，看他人源代码，省力</li><li>github.com大量的项目和源码</li><li>stackoverflow.com技术解答社区以及查询相关资源，环境配置，异常均可找到答案</li></ol>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>牛顿迭代法求平方根</title>
      <link href="/2018/03/19/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>/2018/03/19/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95%E6%B1%82%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      <content type="html"><![CDATA[<h2 id="牛顿迭代法"><a href="#牛顿迭代法" class="headerlink" title="牛顿迭代法"></a>牛顿迭代法</h2><p>从函数意义上理解：我们是要求函数f(x) = x²，使f(x) = num的近似解，即x² - num = 0的<strong>近似解</strong>。</p><p>从几何意义上理解：我们是要求抛物线g(x) = x² - num与x轴交点（g(x) = 0）最接近的点。</p><p>我们假设g(x0)=0，即x0是正解，那么我们要做的就是让近似解x不断逼近x0。</p><p><img src="/img/0_1324910112e742.gif" alt="img"></p><p>先任取一个初始值xi，经过这个点（xi,f(xi)）的切线方程为 f(x) = f(xi) + f′(xi)(x−xi)，令切线方程等于0 (纵轴截距取0)，即可求出：<img src="/img/1521470845824.png" alt="52147084582"></p><p>可以由此得到</p><p><img src="/img/1521470493334.png" alt="52147049333"></p><p>从几何图形上看，因为导数是切线，通过不断迭代，导数与x轴的交点会不断逼近x0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mySqrt</span><span class="params">(self, x)</span>:</span></span><br><span class="line">       <span class="string">"""</span></span><br><span class="line"><span class="string">       :type x: int</span></span><br><span class="line"><span class="string">       :rtype: int</span></span><br><span class="line"><span class="string">       """</span></span><br><span class="line">       r = x</span><br><span class="line">       <span class="keyword">while</span> r*r &gt; x:</span><br><span class="line">           r = (r + x/r) / <span class="number">2</span></span><br><span class="line">       <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python数据结构-链表</title>
      <link href="/2018/03/18/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
      <url>/2018/03/18/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>python实现链表依赖于类生成的实例，每个节点都是一个对象，组合在一起形成一个完整链表</p><p>对于node类只需关注两点：value 和 next<br>对于linked_list需要关心的：head（头结点，默认是node），length（列表的长度）</p><h2 id="链表的数据结构"><a href="#链表的数据结构" class="headerlink" title="链表的数据结构"></a>链表的数据结构</h2><p>如下图所示：</p><p><img src="/img/链表.png" alt=""></p><h2 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h2><h3 id="定义链表"><a href="#定义链表" class="headerlink" title="定义链表"></a>定义链表</h3><p>定义<strong>节点类Node</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">     <span class="string">'''</span></span><br><span class="line"><span class="string">     value: 节点保存的数据，next: 保存下一个节点对象</span></span><br><span class="line"><span class="string">     '''</span></span><br><span class="line">         self.val = value</span><br><span class="line">         self.next = <span class="keyword">None</span></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        用来定义Node的字符输出，print为输出value</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">return</span> str(self.value)</span><br></pre></td></tr></table></figure></p><h3 id="操作链表"><a href="#操作链表" class="headerlink" title="操作链表"></a>操作链表</h3><p>定义<strong>链表类LinkedList</strong><br>链表要包括：<br><strong>属性：</strong><br>链表头：head<br>链表长度：length</p><p><strong>方法：</strong></p><ul><li>is_empty() 链表是否为空</li><li>add(item) 链表头部添加元素</li><li>append(item) 链表尾部添加元素</li><li>insert(index, item) 指定位置添加元素</li><li>delete(index) 删除指定位置节点</li><li>remove(item) 删除某个数值节点</li><li>search(item) 查找节点是否存在</li></ul><h4 id="判断是否为空-is-Empty"><a href="#判断是否为空-is-Empty" class="headerlink" title="判断是否为空: is_Empty()"></a>判断是否为空: is_Empty()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.length == <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="头部添加一个节点：add"><a href="#头部添加一个节点：add" class="headerlink" title="头部添加一个节点：add()"></a>头部添加一个节点：add()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, item)</span>:</span></span><br><span class="line">　　node = Node(item)</span><br><span class="line">　　<span class="comment"># 将新节点的链接域next指向头节点，即head指向的位置</span></span><br><span class="line">　　node.next = self.head</span><br><span class="line">　　<span class="comment"># 将链表的头head指向新节点</span></span><br><span class="line">　　self.head = node</span><br></pre></td></tr></table></figure><h4 id="尾部添加一个节点：append"><a href="#尾部添加一个节点：append" class="headerlink" title="尾部添加一个节点：append()"></a>尾部添加一个节点：append()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    <span class="comment"># 确保item是node对象</span></span><br><span class="line">    item = Node(item)</span><br><span class="line">    <span class="comment"># 先判断链表是否为空，若是空链表，则将head指向新节点</span></span><br><span class="line">　　<span class="keyword">if</span> self.is_empty():</span><br><span class="line">　　　　self.head = node</span><br><span class="line">    <span class="comment"># 若不为空，则找到尾部，将尾节点的next指向新节点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node = self.head</span><br><span class="line">        <span class="keyword">while</span> node.next:</span><br><span class="line">            node = node.next</span><br><span class="line">        node.next = item</span><br><span class="line">    self.length += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="指定位置添加节点：insert"><a href="#指定位置添加节点：insert" class="headerlink" title="指定位置添加节点：insert()"></a>指定位置添加节点：insert()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, item)</span>:</span>　　</span><br><span class="line">　　<span class="comment"># 若指定位置pos为第一个元素之前，则执行头部插入</span></span><br><span class="line">　　<span class="keyword">if</span> index &lt;= <span class="number">0</span>:</span><br><span class="line">   　　self.add(item)</span><br><span class="line">    </span><br><span class="line">　　<span class="comment"># 若指定位置超过链表尾部，则执行尾部插入</span></span><br><span class="line">　　<span class="keyword">elif</span> index &gt; (self.length()<span class="number">-1</span>):</span><br><span class="line">   　　self.append(item)</span><br><span class="line">    </span><br><span class="line">　　<span class="comment"># 找到指定位置</span></span><br><span class="line">　　<span class="keyword">else</span>:</span><br><span class="line">　　　　node = Node(item)　　　　</span><br><span class="line">　　　　<span class="comment"># 从头节点开始移动到插入位置的前一个节点</span></span><br><span class="line">　　　　pre = self.head</span><br><span class="line">　　　　<span class="keyword">while</span> index<span class="number">-1</span>:　　　　　　</span><br><span class="line">　　　　　　pre = pre.next</span><br><span class="line">           index -= <span class="number">1</span></span><br><span class="line">　　　　<span class="comment"># 先将新节点node的next指向插入位置的节点</span></span><br><span class="line">　　　　node.next = pre.next</span><br><span class="line">　　　　<span class="comment"># 将插入位置的前一个节点的next指向新节点</span></span><br><span class="line">　　　　pre.next = node</span><br><span class="line">    self.length += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="删除数值是item的节点：remove-item"><a href="#删除数值是item的节点：remove-item" class="headerlink" title="删除数值是item的节点：remove(item)"></a>删除数值是item的节点：remove(item)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, item)</span>:</span></span><br><span class="line">    pre = <span class="keyword">None</span>     <span class="comment"># 前一个节点</span></span><br><span class="line">    cur = self.head  <span class="comment"># 当前节点</span></span><br><span class="line">    <span class="keyword">while</span> cur:</span><br><span class="line">        <span class="comment"># 找到了指定元素</span></span><br><span class="line">        <span class="keyword">if</span> cur.item == item:</span><br><span class="line">            <span class="comment"># 如果第一个就是删除的节点</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                <span class="comment"># 将头指针指向头节点的后一个节点</span></span><br><span class="line">                self.head = cur.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 将删除位置前一个节点的next指向删除位置的后一个节点</span></span><br><span class="line">                pre.next = cur.next</span><br><span class="line">            self.length -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 继续按链表后移节点</span></span><br><span class="line">            pre = cur</span><br><span class="line">            cur = cur.next</span><br></pre></td></tr></table></figure><h4 id="删除某个位置的节点：delete-index"><a href="#删除某个位置的节点：delete-index" class="headerlink" title="删除某个位置的节点：delete(index)"></a>删除某个位置的节点：delete(index)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, index)</span>:</span></span><br><span class="line"><span class="keyword">if</span> index &gt; self.length:</span><br><span class="line">     <span class="comment"># 索引值超出范围直接提示并且退出</span></span><br><span class="line">     print(<span class="string">"Index  is out of range."</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">        self.head = self.head.next</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre = self.head</span><br><span class="line">            <span class="keyword">while</span> index - <span class="number">1</span>:</span><br><span class="line">                pre = pre.next</span><br><span class="line">                index -= <span class="number">1</span></span><br><span class="line">            pre.next = pre.next.pnext            </span><br><span class="line">         self.length -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="查找节点是否存在：search"><a href="#查找节点是否存在：search" class="headerlink" title="查找节点是否存在：search()"></a>查找节点是否存在：search()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self,item)</span>:</span></span><br><span class="line">　　<span class="string">"""链表查找节点是否存在，并返回True或者False"""</span></span><br><span class="line">　　cur = self.head</span><br><span class="line">　　<span class="keyword">while</span> cur != <span class="keyword">None</span>:</span><br><span class="line">　　　　<span class="keyword">if</span> cur.item == item:</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">　　　　cur = cur.next</span><br><span class="line">　　<span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo博客-优化篇</title>
      <link href="/2018/03/15/hexo%E5%8D%9A%E5%AE%A2-%E4%BC%98%E5%8C%96%E7%AF%87/"/>
      <url>/2018/03/15/hexo%E5%8D%9A%E5%AE%A2-%E4%BC%98%E5%8C%96%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="在文章中插入图片"><a href="#在文章中插入图片" class="headerlink" title="在文章中插入图片"></a>在文章中插入图片</h2><p>在source目录下新建一个img文件夹，将图片放入该文件夹下</p><p>插入图片时将链接写为<code>/img/图片名称</code> </p><h2 id="设置鼠标经过头像时头像旋转"><a href="#设置鼠标经过头像时头像旋转" class="headerlink" title="设置鼠标经过头像时头像旋转"></a>设置鼠标经过头像时头像旋转</h2><p>打开<code>\themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>，在里面添加如下代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"></span><br><span class="line">  /* 头像圆形 */</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line"></span><br><span class="line">  /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img:hover &#123;</span><br><span class="line">  /* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*/</span><br><span class="line"></span><br><span class="line">  /* 鼠标经过头像旋转360度 */</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* Z 轴旋转动画 */</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置侧边栏的社交图标"><a href="#设置侧边栏的社交图标" class="headerlink" title="设置侧边栏的社交图标"></a>设置侧边栏的社交图标</h2><p>打开主题配置文件<code>themes\next\_config.yml</code>，搜索<code>social_icons</code>,在图标库找自己喜欢的小图标，并将名字复制在如下位置，保存即可</p><p><img src="/img/设置侧边栏图标.png" alt=""><br><strong>注意：</strong>第一次操作时记得将<code>social</code>和<strong>你希望添加的社交地址</strong>前面的#去掉</p><h2 id="为文章添加阴影边框"><a href="#为文章添加阴影边框" class="headerlink" title="为文章添加阴影边框"></a>为文章添加阴影边框</h2><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="在网站底部添加访问量"><a href="#在网站底部添加访问量" class="headerlink" title="在网站底部添加访问量"></a>在网站底部添加访问量</h2><p>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在copyright前添加<figure class="highlight plain"><figcaption><span>async src</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>如下图所示：<br><img src="/img/添加访问量.png" alt=""></p><h2 id="为文章实现统计功能"><a href="#为文章实现统计功能" class="headerlink" title="为文章实现统计功能"></a>为文章实现统计功能</h2><p>在根目录下安装 <code>hexo-wordcount</code>,运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>打开主题配置文件<code>themes\next\_config.yml</code>，配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br></pre></td></tr></table></figure><p>这时我们发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等单位，所以接下来打开<code>themes\next\layout\_macro\post.swig</code>文件<br>在对应为位置添加如下字样：<br><img src="/img/阅读时长添加单位.png" alt=""></p><h2 id="刷新之后出现乱码"><a href="#刷新之后出现乱码" class="headerlink" title="刷新之后出现乱码"></a>刷新之后出现乱码</h2><p>将文件保存为UTF-8即可解决</p><h2 id="首页文章设置为只显示预览"><a href="#首页文章设置为只显示预览" class="headerlink" title="首页文章设置为只显示预览"></a>首页文章设置为只显示预览</h2><p>打开主题配置文件<code>themes\next\_config.yml</code><br>搜索”auto_excerpt”,找到如下部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></p><p>把enable改为对应的false改为true即可</p><h2 id="在文章底部添加jiathis分享"><a href="#在文章底部添加jiathis分享" class="headerlink" title="在文章底部添加jiathis分享"></a>在文章底部添加jiathis分享</h2><p>打开主题配置文件<code>themes\next\_config.yml</code>中，设置<code>jiathis: true</code>，即打开了jiathis分享，如下图所示：</p><p><img src="/img/jiathis分享.png" alt=""></p><p>想自定义话，打开<code>themes\next\layout\_partials\share\jiathis.swig</code>修改每一个部分就可以了 </p><figure class="highlight plain"><figcaption><span>class</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;jiathis_txt&quot;&gt;分享到：&lt;/span&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_fav&quot;&gt;收藏夹&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_copy&quot;&gt;复制网址&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_email&quot;&gt;邮件&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_weixin&quot;&gt;微信&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_cqq&quot;&gt;QQ&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_tsina&quot;&gt;新浪微博&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_douban&quot;&gt;豆瓣&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;jiathis_button_share&quot;&gt;一键分享&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="修改文章底部标签的“-”"><a href="#修改文章底部标签的“-”" class="headerlink" title="修改文章底部标签的“#”"></a>修改文章底部标签的“#”</h2><p>打开<code>\themes\next\layout\_macro\post.swig</code></p><p>搜索 <code>rel=&quot;tag&quot;&gt;#</code></p><p>将 # 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code>即可</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文档坐标和视口坐标</title>
      <link href="/2018/03/14/%E6%96%87%E6%A1%A3%E5%9D%90%E6%A0%87%E5%92%8C%E8%A7%86%E5%8F%A3%E5%9D%90%E6%A0%87/"/>
      <url>/2018/03/14/%E6%96%87%E6%A1%A3%E5%9D%90%E6%A0%87%E5%92%8C%E8%A7%86%E5%8F%A3%E5%9D%90%E6%A0%87/</url>
      <content type="html"><![CDATA[<p><img src="/img/边框.png" alt=""></p><h3 id="文档坐标和视口坐标"><a href="#文档坐标和视口坐标" class="headerlink" title="文档坐标和视口坐标"></a>文档坐标和视口坐标</h3><p>视口坐标是相对于窗口的坐标，而文档坐标是相对于整个文档而言。例如，在文档坐标中如果一个元素的相对于文档的Y坐标是200px，并且用户已经把浏览器向下滚动了75px，那么视口坐标中元素的Y坐标为200px– 75px = 125px。</p>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
